import tensorflow as tf
import numpy as np
from tensorflow.examples.tutorials.mnist import input_data
from tensorflow.python.framework import graph_util

mnist = input_data.read_data_sets("MNIST_data",one_hot=True)

batch_size = 100
n_batch = mnist.train.num_examples // batch_size

def weight_define(shape):
    return tf.Variable(tf.truncated_normal(shape,stddev=0.1))

def bias_define(shape):
    return tf.Variable(tf.constant(0.1,shape=shape))

def con2d(x,w):
    return tf.nn.conv2d(x,w,strides=[1,1,1,1],padding="SAME")

def max_pool_2x2(x):
    return tf.nn.max_pool(x,ksize=[1,2,2,1],strides=[1,2,2,1],padding="SAME")

x = tf.placeholder(tf.float32,[None,784],name='input')
y = tf.placeholder(tf.float32,[None,10],name='y_input')

x_image = tf.reshape(x,[-1,28,28,1])

W_conv1 = weight_define([5,5,1,32])
b_conv1 = bias_define([32])

h_conv1 = tf.nn.relu(con2d(x_image,W_conv1) + b_conv1)
h_pool1 = max_pool_2x2(h_conv1)

W_conv2 = weight_define([5,5,32,64])
b_conv2 = bias_define([64])

h_conv2 = tf.nn.relu(con2d(h_pool1,W_conv2) + b_conv2)
h_pool2 = max_pool_2x2(h_conv2)

W_fc1 = weight_define([7*7*64,1024])
b_fc1 = bias_define([1024])

h_pool2_flat = tf.reshape(h_pool2,[-1,7*7*64])
h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat,W_fc1) + b_fc1)

keep_prob = tf.placeholder(tf.float32,name='keep_prob')
h_fc1_drop = tf.nn.dropout(h_fc1,keep_prob)

W_fc2 = weight_define([1024,10])
b_fc2 = bias_define([10])

prediction = tf.nn.softmax(tf.matmul(h_fc1_drop,W_fc2) + b_fc2,name='softmax')

cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y,logits=prediction))

train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)

correct_prediction = tf.equal(tf.argmax(prediction,1),tf.argmax(y,1))

accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32),name='accuracy')
'''
训练cnn模型生成ckpt和pb
'''
# saver = tf.train.Saver()
#
# with tf.Session() as sess:
#     sess.run(tf.global_variables_initializer())
#     for epoch in range(21):
#         for batch in range(n_batch):
#             batch_xs,batch_ys = mnist.train.next_batch(batch_size)
#             sess.run(train_step,feed_dict={x:batch_xs,y:batch_ys,keep_prob:1.0})
#         saver.save(sess,'mnist_cnn_model/mnist_cnn.ckpt')
#         constant_graph = graph_util.convert_variables_to_constants(sess,sess.graph_def,['softmax'])
#         with tf.gfile.FastGFile('mnist_cnn_model/mnist_cnn.pb',mode='wb') as f:
#             f.write(constant_graph.SerializeToString())
#         acc = sess.run(accuracy,feed_dict={x:mnist.test.images,y:mnist.test.labels,keep_prob:1.0})
#         print("Iter:",epoch,"test accuracy:",acc)
'''
加载ckpt模型并识别计算准确率
'''
# saver = tf.train.Saver()
# # with tf.Session() as sess:
# #     sess.run(tf.global_variables_initializer())
# #     saver.restore(sess,'mnist_cnn_model/mnist_cnn.ckpt')
# #     print(sess.run(accuracy,feed_dict={x:mnist.test.images,y:mnist.test.labels,keep_prob:1.0}))
'''
加载pb模型并识别计算准确率
'''
with tf.Graph().as_default():
    output_graph_def = tf.GraphDef()
    with open('mnist_cnn_model/mnist_cnn.pb',mode='rb') as f:
        output_graph_def.ParseFromString(f.read())
        _ = tf.import_graph_def(output_graph_def, name="")

    with tf.Session() as sess:

        init = tf.global_variables_initializer()
        sess.run(init)
        x_input = sess.graph.get_tensor_by_name("input:0")
        keep_prob = sess.graph.get_tensor_by_name("keep_prob:0")
        prediction = sess.graph.get_tensor_by_name("softmax:0")

        result_prediction = sess.run(prediction,feed_dict={x_input:mnist.test.images,keep_prob:1.0})
        compare_result = np.equal(np.argmax(result_prediction, axis=1),np.argmax(mnist.test.labels, axis=1))
        compare_result = compare_result.astype(np.float32)
        print(np.mean(compare_result))

